'''python
import sys  # used to exit the game
import pygame
from settings import Settings
from ship import Ship

class AllienInvasion:
    '''Overall class to manage game assets and behavior.'''
    
    def __init__(self):
        '''Initialize the game, and create game resources.'''
        pygame.init()  
        # initializes the background settings the Pygame needs to work properly.
        self.settings = Settings()
        
        self.screen = pygame.display.set_mode(
        (self.settings.screen_width, self.settings.screen_height)) 
        # create a display window, on which we’ll draw all the game’s graphical elements
        
        self.ship = Ship(self)
        '''The self argument here refers to the current instance of
        AlienInvasion. This is the parameter that gives Ship access to the game’s
        resources, such as the screen object.'''
        
        self.clock = pygame.time.Clock()
        
        pygame.display.set_caption("Alien Invasion")
        
        # Set the background color.
        self.bg_color = self.settings.bg_color  # (R, G, B)
        
    def run_game(self):
        '''Start the main loop for the game.'''
        while True:
            # Watch for keyboard and mouse events.
            self._check_events()
            self.ship.update()
            self._update_screen()
            self.clock.tick(60)  # Loop runs 60 times in a second
            
    # In Python, a single leading underscore indicates a helper method.  
    def _check_events(self):
        """Respond to keypresses and mouse events."""
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                sys.exit()
            elif event.type == pygame.KEYDOWN:
                if event.key == pygame.K_RIGHT:
                    # Move the ship to the right.
                    self.ship.moving_right = True
                elif event.key == pygame.K_LEFT:
                    self.ship.moving_left = True
            elif event.type == pygame.KEYUP:
                if event.key == pygame.K_RIGHT:
                    self.ship.moving_right = False
                elif event.key == pygame.K_LEFT:
                    self.ship.moving_left = False    
    def _update_screen(self):
        """Update images on the screen, and flip to the new screen."""  
        # Redraw the screen during each pass through the loop.
        self.screen.fill(self.settings.bg_color)  
        self.ship.blitme()
        # Make the most recently drawn screen visible.
        pygame.display.flip()
              
if __name__ == '__main__':
    # Make a game instance, and run the game.
    ai = AllienInvasion()
    ai.run_game()
            
